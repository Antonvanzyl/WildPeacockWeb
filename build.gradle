apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "project-report"
apply plugin: 'jetty'

project.ext.projectSrcDir   = "wildPeacock"
project.ext.warName = "wildPeacock.war"
project.ext.serverDeployDir="wildPeacock" 		// which jboss server to deploy

version = "1.8"
sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {

}

configurations {
	// spring security annotations conflicts with this
	all*.exclude group:"hibernate-annotations", module: "hibernate-annotations"
	all*.exclude group:"xml-apis", module: "xml-apis"
	all*.exclude group: "com.sun.xml.bind" // provided bt JBoss 5.0.1
	all*.exclude  group:"org.apache.geronimo.specs", module: "geronimo-javamail_1.4_spec" // provided bt JBoss 5.0.1
	compile.transitive = false
}


repositories {
	maven { url "http://echannel.int.capinet:8081/nexus/content/groups/public" }
	flatDir name: "localRepository", dirs: file("$rootDir/libs")
}

dependencies {

	// depends on these libs (i.e. these libs are required for compilation and WILL be included in the jar)
	compile "org.springframework:spring-aspects:3.1.0.RELEASE",
	"org.springframework:spring-beans:3.1.0.RELEASE",
	"org.springframework:spring-context:3.1.0.RELEASE",
	"org.springframework:spring-core:3.1.0.RELEASE",
	"org.springframework:spring-expression:3.1.0.RELEASE",
	"org.springframework:spring-jdbc:3.1.0.RELEASE",
	"org.springframework:spring-orm:3.1.0.RELEASE",
	"org.springframework:spring-test:3.1.0.RELEASE",
	"org.springframework:spring-tx:3.1.0.RELEASE",
	"org.springframework:spring-web:3.1.0.RELEASE",
	"org.springframework:spring-webmvc:3.1.0.RELEASE",
	"org.springframework.security:spring-security-core:3.1.0.RELEASE",
	"org.springframework.security:spring-security-config:3.1.0.RELEASE",
	"org.springframework.security:spring-security-web:3.1.0.RELEASE",
	"org.json:json:20090211",
	"commons-codec:commons-codec:1.6",
	"commons-io:commons-io:2.4",
	"javax.validation:validation-api:1.0.0.GA",
	"org.apache.commons:commons-lang3:3.1",
	"org.apache.cxf:cxf-api:2.3.4",
	"org.apache.cxf:cxf-common-utilities:2.3.4",
	"org.aspectj:aspectjweaver:1.7.0",
	"org.jasypt:jasypt:1.9.0",
	"org.jasypt:jasypt-hibernate3:1.9.0",
	"org.jasypt:jasypt-spring31:1.9.0",
	"joda-time:joda-time:2.1",
	//	"org.json:json:20090211",
	"org.liquibase:liquibase-core:2.0.5"

	compile("org.hibernate:hibernate-validator:4.2.0.Final") { exclude module: "slf4j-api" }
	compile("org.jboss.envers:jboss-envers:1.2.3-hibernate-3.3") {
		exclude group: "org.hibernate"
		exclude group: "org.hibernate.javax.persistence" exclude module: "slf4j-api"  }

	// these are all provided by JBoss 5.1 (i.e. these libs are required for compilation and will NOT be included in the jar)
	// from JBOSS client
	providedCompile("org.hibernate:hibernate-annotations:3.4.0.GA") {
		//same
		exclude module: "slf4j-api"
		exclude module: "hibernate-core"
	}
	providedCompile("org.hibernate:hibernate-core:3.3.2.GA") { exclude module: "slf4j-api" }//was 3.3.1.GA
	providedCompile	"javax.persistence:persistence-api:1.0.2",//was 1.0.2->1.0.2.GA
	"javax.mail:mail:1.4.2",//was 1.4->1.4.2ea
	"log4j:log4j:1.2.14",//same
	"org.slf4j:slf4j-api:1.5.8"//1.5.0->1.5.8-patch-01

	// from JBOSS lib/endorsed
	providedCompile	"javax.xml:jaxb-api:2.1",//same
	"xalan:xalan:2.7.1",//same
	"xerces:xercesImpl:2.9.1"//was 2.9.0

	// from JBOSS lib
	providedCompile	"com.sun.xml.bind:jaxb-impl:2.1.12",//was 2.1.9
	"com.sun.xml.bind:jaxb-xjc:2.1.12",//was 2.1.9
	//	"axis:axis-wsdl4j:1.2",//??
	//	"commons-httpclient:commons-httpclient:3.0",
	//	"javax.servlet.jsp:jsp-api:2.1",
	"javax.servlet:servlet-api:2.5",
	"org.jboss.logging:jboss-logging-spi:2.1.2.GA"//was 2.0.5.GA

	// these are all needed at runtime (i.e. these libs are NOT required for compilation, but WILL be included in the jar)
	runtime "org.apache.cxf:cxf-rt-bindings-soap:2.3.4",
	"org.apache.cxf:cxf-rt-frontend-jaxws:2.3.4",
	"org.apache.cxf:cxf-rt-management:2.3.4",
	"org.apache.cxf:cxf-rt-transports-http:2.3.4",
	"c3p0:c3p0:0.9.1.2",
	"cglib:cglib:2.2.2",
	"org.apache.geronimo.specs:geronimo-annotation_1.0_spec:1.1.1", // should be providedCompile, but needed to load cxf in JBoss
	"org.slf4j:slf4j-log4j12:1.5.8"


	testCompile "com.h2database:h2:1.2.138",
	"commons-dbcp:commons-dbcp:1.3",
	"org.mortbay.jetty:jetty-j2se6:6.1.26"

	testRuntime "c3p0:c3p0:0.9.1.2",
	"commons-logging:commons-logging:1.1.0@jar",
	"javassist:javassist:3.12.1.GA",
	"joda-time:joda-time:2.1", // for cxf
	"log4j:log4j:1.2.14",
	"org.mortbay.jetty:jetty-util:6.1.26",
	"org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127",
	"org.mortbay.jetty:jsp-api-2.1-glassfish:2.1.v20100127",
	"org.mortbay.jetty:servlet-api-2.5:6.1.14",
	"org.slf4j:slf4j-api:1.5.8",
	"org.slf4j:slf4j-log4j12:1.5.8",
	"net.sourceforge.jtds:jtds:1.2.7"

}


def getWebInf(String env) {

	def filesToCopy = copySpec {
		with copySpec{
			from "${projectDir}/Configuration/Common/configuration/WEB-INF"
			exclude { fte -> file("${projectDir}/Configuration/${env}/configuration/WEB-INF/"+fte.file.name).exists()}
		}
		from "${projectDir}/Configuration/${env}/configuration/WEB-INF"
	}
	filesToCopy
}


def copyToJBoss(String env, String staging) {

	// Create JBOSS server structure
	File binDir = file("${staging}/bin")
	File binLibDir = file("${staging}/bin/lib")
	File configDir = file("${staging}/server/${serverDeployDir}/conf")
	File capitecDir = file("${staging}/server/${serverDeployDir}/conf/capitec")
	File deployDir = file("${staging}/server/${serverDeployDir}/deploy")

	println "Creating dirs..."
	[
		binDir,
		binLibDir,
		configDir,
		capitecDir,
		deployDir
	]*.mkdirs()

	// Copy files into JBOSS server structure
	def fromTo = [
		"${projectDir}/Configuration/Common/bin/":binDir,
		"${projectDir}/Configuration/Common/configuration/conf":configDir,
		"${projectDir}/Configuration/Common/configuration/deploy":deployDir,
		"${projectDir}/Configuration/${env}/bin/":binDir,
		"${projectDir}/Configuration/${env}/configuration/conf":configDir,
		"${projectDir}/Configuration/${env}/configuration/deploy":deployDir,
	]
	println "Copying files..."

	fromTo.each { source, destination ->
		println "  Copy: ${source} -to- ${destination}"
		copy {
			from source
			into destination
		}
	}

	// add liquibase for command-line installation
	copy {
		from configurations.compile
		into binLibDir
		include 'liquibase**'
	}

}




